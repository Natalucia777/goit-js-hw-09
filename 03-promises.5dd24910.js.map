{"mappings":"oeAAAA,EAAA,S,iBAGA,MAAMC,EAAcC,SAASC,cAAc,SAC3C,IAAIC,EAAW,KACXC,EAAU,KACVC,EAAY,KAOd,SAAOC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IACbG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GACnCA,EAAM,G,CAbbF,EAAc,EAAG,MACdS,MAAK,EAACR,SAAEA,EAAQC,MAAEA,MACjBQ,QAAQC,IAAI,uBAAqBV,QAAiBC,MAAU,IAC3DU,OAAI,EAACX,SAAEA,EAAQC,MAAEA,MAClBQ,QAAQC,IAAI,sBAAoBV,QAAiBC,MAAU,IAkC/DR,EAAYmB,iBAAiB,UArBPC,IACpBA,EAAEC,iBACGD,EAAEE,OAAOC,QACd,MACEC,UAAYhB,MAAAiB,EAAKC,KAAEA,EAAIC,OAAEA,IACvBP,EAAEQ,cAENzB,EAAW0B,OAAOJ,EAAMK,OACxB1B,EAAUyB,OAAOH,EAAKI,OACtBzB,EAAYwB,OAAOF,EAAOG,OAC1B,IAAK,IAAIC,EAAI,EAAGA,GAAK1B,EAAW0B,IAC9BzB,EAAcyB,EAAG3B,GAASW,MAAK,EAACR,SAAEA,EAAQC,MAAEA,MAC1CwB,EAAAC,OAAOC,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAE9DU,OAAM,EAACX,SAAEA,EAAQC,MAAEA,MAClBwB,EAAAC,OAAOE,QAAQ,sBAAoB5B,QAAeC,MAAU,IAEhEL,GAAYC,EAEdgB,EAAEQ,cAAcQ,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formElement = document.querySelector('.form');\nlet delayInp = null;\nlet stepInp = null;\nlet amountInp = null;\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`); })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`); });\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else { reject({ position, delay }); }\n    }, delay);\n  });\n} \n  \nconst submitHandler = e => {\n  e.preventDefault();\n  if (!e.target.tagName === 'BUTTON') return;\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  delayInp = Number(delay.value);\n  stepInp = Number(step.value);\n  amountInp = Number(amount.value);\n  for (let i = 1; i <= amountInp; i++) {\n    createPromise(i, stepInp).then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayInp += stepInp;\n  }\n  e.currentTarget.reset();\n};\nformElement.addEventListener('submit', submitHandler);"],"names":["parcelRequire","$47d4ff9957288465$var$formElement","document","querySelector","$47d4ff9957288465$var$delayInp","$47d4ff9957288465$var$stepInp","$47d4ff9957288465$var$amountInp","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","then","console","log","catch","addEventListener","e","preventDefault","target","tagName","elements","delay1","step","amount","currentTarget","Number","value","i","$iQIUW","Notify","success","failure","reset"],"version":3,"file":"03-promises.5dd24910.js.map"}