{"mappings":"oeAAAA,EAAA,S,iBAGA,MAAMC,EAAcC,SAASC,cAAc,SAC3C,IAAIC,EAAWF,SAASC,cAAc,uBAClCE,EAAUH,SAASC,cAAc,sBACjCG,EAAYJ,SAASC,cAAc,wBA6BvC,SAASI,EAAcC,EAAUC,GAC9B,MAAMC,EAAgBC,KAAKC,SAAW,GACvC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CApCbR,EAAYgB,iBAAiB,UAE7B,SAAuBC,GACrBA,EAAEC,iBACF,IAAIC,EAAYC,OAAOjB,EAASkB,OAEhC,IAAK,IAAIC,EAAI,EAAGA,GAAKF,OAAOf,EAAUgB,OAAQC,GAAK,EACjDhB,EAAcgB,EAAGH,GACdI,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBgB,EAAAC,OAAOC,QAAQ,uBAAqBnB,QAAiBC,MAAU,IAEhEmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,MAClBgB,EAAAC,OAAOG,QAAQ,sBAAoBrB,QAAiBC,MAAU,IAElEW,GAAaC,OAAOhB,EAAQiB,OAE9BJ,EAAEY,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formElement = document.querySelector('.form');\nlet delayInp = document.querySelector('input[name=\"delay\"]');\nlet stepInp = document.querySelector('input[name=\"step\"]');\nlet amountInp = document.querySelector('input[name=\"amount\"]');\n\nformElement.addEventListener('submit', submitHandler);\n\nfunction submitHandler(e) {\n  e.preventDefault();\n  let timeDelay = Number(delayInp.value);\n  // let timeAmount = Number(amountInp.value);\n  for (let i = 1; i <= Number(amountInp.value); i += 1) {\n    createPromise(i, timeDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    timeDelay += Number(stepInp.value);\n  }\n  e.currentTarget.reset()\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nfunction createPromise(position, delay) {\n   const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["parcelRequire","$47d4ff9957288465$var$formElement","document","querySelector","$47d4ff9957288465$var$delayInp","$47d4ff9957288465$var$stepInp","$47d4ff9957288465$var$amountInp","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","timeDelay","Number","value","i","then","$iQIUW","Notify","success","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.1841ffd7.js.map"}