{"mappings":"gfAAAA,EAAA,S,iBAGMC,EAAcC,SAASC,cAAc,SACvCC,EAAWF,SAASC,cAAc,uBAClCE,EAAUH,SAASC,cAAc,sBACjCG,EAAYJ,SAASC,cAAc,wBAEvCF,EAAYM,iBAAiB,SAAUC,GAEvC,IAAMA,EAAgB,SAAAC,GACpBA,EAAEC,iBAGF,IAFA,IAAIC,EAAYC,OAAOR,EAASS,OAC5BC,EAAaF,OAAON,EAAUO,OACzBE,EAAI,EAAGA,GAAKD,EAAYC,IAC/BC,EAAcD,EAAGJ,GACdM,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBC,EAAAC,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAE9DK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBC,EAAAC,OAAOI,QAAQ,sBAAuCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAEhET,GAAaC,OAAOP,EAAQQ,OAE9BJ,EAAEkB,cAAcC,O,EAWlB,SAASZ,EAAcG,EAAUC,GAC9B,IAAMS,EAAgBC,KAAKC,SAAW,GACvC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEd,WAAUC,UAEpBc,EAAO,CAAEf,WAAUC,S,GAEpBA,E,IAjBPJ,EAAc,EAAG,MACdC,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBgB,QAAQC,IAAI,uBAAwCb,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAE3DK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBgB,QAAQC,IAAI,sBAAqCb,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formElement = document.querySelector('.form');\nlet delayInp = document.querySelector('input[name=\"delay\"]');\nlet stepInp = document.querySelector('input[name=\"step\"]');\nlet amountInp = document.querySelector('input[name=\"amount\"]');\n\nformElement.addEventListener('submit', submitHandler);\n\nconst submitHandler = e => {\n  e.preventDefault();\n  let timeDelay = Number(delayInp.value);\n  let timeAmount = Number(amountInp.value);\n  for (let i = 1; i <= timeAmount; i++) {\n    createPromise(i, timeDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    timeDelay += Number(stepInp.value);\n  }\n  e.currentTarget.reset()\n}\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\nfunction createPromise(position, delay) {\n   const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["parcelRequire","$ce04d3a99e08e73b$var$formElement","document","querySelector","$ce04d3a99e08e73b$var$delayInp","$ce04d3a99e08e73b$var$stepInp","$ce04d3a99e08e73b$var$amountInp","addEventListener","$ce04d3a99e08e73b$var$submitHandler","e","preventDefault","timeDelay","Number","value","timeAmount","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","delay","$h6c0i","Notify","success","concat","catch","failure","currentTarget","reset","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log"],"version":3,"file":"03-promises.48e9604b.js.map"}