{"mappings":"gfAAAA,EAAA,S,iBAGMC,EAAcC,SAASC,cAAc,SAEvCC,EAAU,KACVC,EAAY,KAShB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAjBPF,EAAc,EAAG,MACdS,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MACjBS,QAAQC,IAAI,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,IAE3DY,OAAM,SAAAJ,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MAClBS,QAAQC,IAAI,sBAAuCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,IAsC7DP,EAAYoB,iBAAiB,UAtBP,SAAAC,GACpBA,EAAEC,iBACGD,EAAEE,OAAOC,QACd,IAEmBC,EAAfJ,EAAEK,cADJC,SAAYC,EAAKH,EAALlB,MAAOsB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGhBC,OAAOH,EAAMI,OACxB7B,EAAU4B,OAAOF,EAAKG,OACtB5B,EAAY2B,OAAOD,EAAOE,OAC1B,IAAK,IAAIC,EAAI,EAAGA,GAAK7B,EAAW6B,IAC9B5B,EAAc4B,EAAG9B,GACdW,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MACjB2B,EAAAC,OAAOC,QAAQ,uBAAwClB,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,IAE9DY,OAAM,SAAAJ,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MAClB2B,EAAAC,OAAOE,QAAQ,sBAAqCnB,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,IAElDJ,EAEdkB,EAAEK,cAAcY,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formElement = document.querySelector('.form');\nlet delayInp = null;\nlet stepInp = null;\nlet amountInp = null;\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst submitHandler = e => {\n  e.preventDefault();\n  if (!e.target.tagName === 'BUTTON') return;\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  delayInp = Number(delay.value);\n  stepInp = Number(step.value);\n  amountInp = Number(amount.value);\n  for (let i = 1; i <= amountInp; i++) {\n    createPromise(i, stepInp)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayInp += stepInp;\n  }\n  e.currentTarget.reset();\n};\nformElement.addEventListener('submit', submitHandler);\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$formElement","document","querySelector","$ce04d3a99e08e73b$var$stepInp","$ce04d3a99e08e73b$var$amountInp","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","then","param","console","log","concat","catch","addEventListener","e","preventDefault","target","tagName","_elements","currentTarget","elements","delay1","step","amount","Number","value","i","$h6c0i","Notify","success","failure","reset"],"version":3,"file":"03-promises.9b4fb107.js.map"}