{"mappings":"oeAAAA,EAAA,S,iBAGA,MAAMC,EAAcC,SAASC,cAAc,SAC3C,IAAIC,EAAWF,SAASC,cAAc,uBAClCE,EAAUH,SAASC,cAAc,sBACjCG,EAAYJ,SAASC,cAAc,wBAEvCF,EAAYM,iBAAiB,SAAUC,GAEvC,MAAMA,EAAgBC,IACpBA,EAAEC,iBACF,IAAIC,EAAYC,OAAOR,EAASS,OAC5BC,EAAaF,OAAON,EAAUO,OAClC,IAAK,IAAIE,EAAI,EAAGA,GAAKD,EAAYC,IAC/BC,EAAcD,EAAGJ,GACdM,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBC,EAAAC,OAAOC,QAAQ,uBAAqBJ,QAAiBC,MAAU,IAEhEI,OAAM,EAACL,SAAEA,EAAQC,MAAEA,MAClBC,EAAAC,OAAOG,QAAQ,sBAAoBN,QAAiBC,MAAU,IAElER,GAAaC,OAAOP,EAAQQ,OAE9BJ,EAAEgB,cAAcC,OAAO,EAWzB,SAASV,EAAcE,EAAUC,GAC9B,MAAMQ,EAAgBC,KAAKC,SAAW,GACvC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEb,E,MAAUC,IAEpBa,EAAO,C,SAAEd,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAjBbH,EAAc,EAAG,MACdC,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBe,QAAQC,IAAI,uBAAqBjB,QAAiBC,MAAU,IAE7DI,OAAM,EAACL,SAAEA,EAAQC,MAAEA,MAClBe,QAAQC,IAAI,sBAAoBjB,QAAeC,MAAU","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formElement = document.querySelector('.form');\nlet delayInp = document.querySelector('input[name=\"delay\"]');\nlet stepInp = document.querySelector('input[name=\"step\"]');\nlet amountInp = document.querySelector('input[name=\"amount\"]');\n\nformElement.addEventListener('submit', submitHandler);\n\nconst submitHandler = e => {\n  e.preventDefault();\n  let timeDelay = Number(delayInp.value);\n  let timeAmount = Number(amountInp.value);\n  for (let i = 1; i <= timeAmount; i++) {\n    createPromise(i, timeDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    timeDelay += Number(stepInp.value);\n  }\n  e.currentTarget.reset()\n}\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\nfunction createPromise(position, delay) {\n   const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["parcelRequire","$47d4ff9957288465$var$formElement","document","querySelector","$47d4ff9957288465$var$delayInp","$47d4ff9957288465$var$stepInp","$47d4ff9957288465$var$amountInp","addEventListener","$47d4ff9957288465$var$submitHandler","e","preventDefault","timeDelay","Number","value","timeAmount","i","$47d4ff9957288465$var$createPromise","then","position","delay","$iQIUW","Notify","success","catch","failure","currentTarget","reset","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log"],"version":3,"file":"03-promises.011cbbc8.js.map"}