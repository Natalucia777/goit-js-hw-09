{"mappings":"gfAAAA,EAAA,S,iBAGMC,EAAcC,SAASC,cAAc,SACvCC,EAAWF,SAASC,cAAc,uBAClCE,EAAUH,SAASC,cAAc,sBACjCG,EAAYJ,SAASC,cAAc,wBA6BvC,SAASI,EAAcC,EAAUC,GAC9B,IAAMC,EAAgBC,KAAKC,SAAW,GACvC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IApCPR,EAAYgB,iBAAiB,UAE7B,SAAuBC,GACrBA,EAAEC,iBAGF,IAFA,IAAIC,EAAYC,OAAOjB,EAASkB,OAEvBC,EAAI,EAAGA,GAAKF,OAAOf,EAAUgB,OAAQC,GAAK,EACjDhB,EAAcgB,EAAGH,GACdI,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MACjBiB,EAAAC,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAE9DqB,OAAM,SAAAL,G,IAAGjB,EAAQiB,EAARjB,SAAUC,EAAKgB,EAALhB,MAClBiB,EAAAC,OAAOI,QAAQ,sBAAuCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAEhEW,GAAaC,OAAOhB,EAAQiB,OAE9BJ,EAAEc,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formElement = document.querySelector('.form');\nlet delayInp = document.querySelector('input[name=\"delay\"]');\nlet stepInp = document.querySelector('input[name=\"step\"]');\nlet amountInp = document.querySelector('input[name=\"amount\"]');\n\nformElement.addEventListener('submit', submitHandler);\n\nfunction submitHandler(e) {\n  e.preventDefault();\n  let timeDelay = Number(delayInp.value);\n  // let timeAmount = Number(amountInp.value);\n  for (let i = 1; i <= Number(amountInp.value); i += 1) {\n    createPromise(i, timeDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    timeDelay += Number(stepInp.value);\n  }\n  e.currentTarget.reset()\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nfunction createPromise(position, delay) {\n   const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["parcelRequire","$ce04d3a99e08e73b$var$formElement","document","querySelector","$ce04d3a99e08e73b$var$delayInp","$ce04d3a99e08e73b$var$stepInp","$ce04d3a99e08e73b$var$amountInp","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","timeDelay","Number","value","i","then","param","$h6c0i","Notify","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.ae2405c7.js.map"}